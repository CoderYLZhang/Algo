//
//  36-IsValidSudoku-M.swift
//  LeetCode
//
//  Created by yinlong on 2021/7/15.
//  Copyright © 2021 张银龙. All rights reserved.
//

import Foundation

/*
 36. 有效的数独

 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

 数字 1-9 在每一行只能出现一次。
 数字 1-9 在每一列只能出现一次。
 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 数独部分空格内已填入了数字，空白格用 '.' 表示。

 注意：

 一个有效的数独（部分已被填充）不一定是可解的。
 只需要根据以上规则，验证已经填入的数字是否有效即可。


 来源：力扣（LeetCode）
 链接：https://leetcode-cn.com/problems/valid-sudoku
 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

class IsValidSudoku {
    func isValidSudoku(_ board: [[Character]]) -> Bool {
        
        var rowSets = Array(repeating: Set<Character>(), count: 9)
        var colSets = Array(repeating: Set<Character>(), count: 9)
        var blockSets = Array(repeating: Set<Character>(), count: 9)
        
        for (rowIndex, rowValue) in board.enumerated() {
            for (colIndex, colValue) in rowValue.enumerated() where colValue != "." {
                // 行校验
                if !rowSets[rowIndex].insert(colValue).inserted {
                    // 插入失败, 说明之前已经存在
                    return false
                }
                // 列校验
                if !colSets[colIndex].insert(colValue).inserted {
                    // 插入失败, 说明之前已经存在
                    return false
                }
                
                // 块校验
                let blockIndex = 3 * (rowIndex / 3) + (colIndex / 3)
                if !blockSets[blockIndex].insert(colValue).inserted {
                    // 插入失败, 说明之前已经存在
                    return false
                }
            }
        }
        
        return true
    }
}

extension IsValidSudoku {
    func test() {
        let board: [[Character]] = [
            ["5","3",".",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ]

        let board2: [[Character]] = [
            ["8","3","3",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            [".",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ]
        let board3: [[Character]] = [
            ["5","3",".",".","7",".",".",".","."],
            ["6","5",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ]
        let board4: [[Character]] = [
            ["8","3",".",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ]
        print(isValidSudoku(board))
        print(isValidSudoku(board2))
        print(isValidSudoku(board3))
        print(isValidSudoku(board4))
    }
}
